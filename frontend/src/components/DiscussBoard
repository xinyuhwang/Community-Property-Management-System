// frontend/src/components/DiscussBoard.js
import React, { useReducer, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';
import DOMPurify from 'dompurify';
import {
  Box,
  Button,
  Card,
  CardContent,
  CardHeader,
  Container,
  Divider,
  Grid,
  List,
  ListItem,
  TextField,
  Typography,
  IconButton,
  Avatar,
  Snackbar,
  Alert,
  CircularProgress
} from '@mui/material';
import { Delete, Comment, ThumbUp } from '@mui/icons-material';
import { useInfiniteScroll } from '../hooks/useInfiniteScroll'; // 自定义无限滚动Hook

// =============================================================================
// 状态管理
// =============================================================================
const initialState = {
  posts: [],
  newPost: { title: '', content: '' },
  selectedPost: null,
  comments: {},
  page: 1,
  loading: false,
  hasMore: true,
  error: null
};

function discussReducer(state, action) {
  switch (action.type) {
    case 'SET_POSTS':
      return { ...state, posts: [...state.posts, ...action.payload] };
    case 'SET_NEW_POST':
      return { ...state, newPost: { ...state.newPost, ...action.payload } };
    case 'ADD_POST':
      return { ...state, posts: [action.payload, ...state.posts] };
    case 'DELETE_POST':
      return { ...state, posts: state.posts.filter(p => p.id !== action.payload) };
    case 'SET_COMMENTS':
      return { ...state, comments: { ...state.comments, [action.postId]: action.payload } };
    case 'ADD_COMMENT':
      return {
        ...state,
        comments: {
          ...state.comments,
          [action.postId]: [...(state.comments[action.postId] || []), action.payload]
        }
      };
    case 'TOGGLE_LIKE':
      return {
        ...state,
        posts: state.posts.map(post =>
          post.id === action.postId
            ? { ...post, likes: post.likes + (action.isLiked ? -1 : 1), isLiked: !action.isLiked }
            : post
        )
      };
    case 'SET_LOADING':
      return { ...state, loading: action.payload };
    case 'SET_ERROR':
      return { ...state, error: action.payload };
    default:
      return state;
  }
}

// =============================================================================
// 主组件
// =============================================================================
const DiscussBoard = ({ user, isAdmin, fetchPosts, createPost, deletePost, createComment }) => {
  const [state, dispatch] = useReducer(discussReducer, initialState);
  const { posts, newPost, comments, loading, error } = state;

  // 无限滚动配置
  const loadMore = useCallback(async () => {
    if (state.loading || !state.hasMore) return;
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const newPosts = await fetchPosts(state.page);
      dispatch({ type: 'SET_POSTS', payload: newPosts });
      dispatch({ type: 'SET_LOADING', payload: false });
    } catch (err) {
      dispatch({ type: 'SET_ERROR', payload: err.message });
    }
  }, [state.page, state.loading, state.hasMore, fetchPosts]);

  const { lastPostRef } = useInfiniteScroll(loadMore);

  // 实时更新（WebSocket示例）
  useEffect(() => {
    const ws = new WebSocket('ws://your-api/ws/posts');
    ws.onmessage = (event) => {
      const newPost = JSON.parse(event.data);
      dispatch({ type: 'ADD_POST', payload: newPost });
    };
    return () => ws.close();
  }, []);

  // 处理表单提交
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!newPost.title.trim() || !newPost.content.trim()) {
      dispatch({ type: 'SET_ERROR', payload: 'Title and content are required' });
      return;
    }

    try {
      const createdPost = await createPost({
        ...newPost,
        author: user.username,
        avatar: user.avatar
      });
      dispatch({ type: 'ADD_POST', payload: createdPost });
      dispatch({ type: 'SET_NEW_POST', payload: { title: '', content: '' } });
    } catch (err) {
      dispatch({ type: 'SET_ERROR', payload: err.message });
    }
  };

  // 处理评论提交
  const handleCommentSubmit = async (postId, content) => {
    try {
      const newComment = await createComment(postId, {
        content: DOMPurify.sanitize(content),
        author: user.username
      });
      dispatch({ type: 'ADD_COMMENT', payload: newComment, postId });
    } catch (err) {
      dispatch({ type: 'SET_ERROR', payload: err.message });
    }
  };

  return (
    <Container maxWidth="md">
      {/* 新建帖子表单 */}
      <Card sx={{ mb: 4 }}>
        <CardContent>
          <form onSubmit={handleSubmit}>
            <TextField
              fullWidth
              label="Post Title"
              variant="outlined"
              margin="normal"
              value={newPost.title}
              onChange={(e) =>
                dispatch({ type: 'SET_NEW_POST', payload: { title: e.target.value } })
              }
            />
            <TextField
              fullWidth
              multiline
              minRows={4}
              label="Share your thoughts..."
              variant="outlined"
              margin="normal"
              value={newPost.content}
              onChange={(e) =>
                dispatch({ type: 'SET_NEW_POST', payload: { content: e.target.value } })
              }
            />
            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
              <Button type="submit" variant="contained">
                Post
              </Button>
            </Box>
          </form>
        </CardContent>
      </Card>

      {/* 帖子列表 */}
      <List>
        {posts.map((post, index) => (
          <Card
            key={post.id}
            ref={index === posts.length - 1 ? lastPostRef : null}
            sx={{ mb: 3 }}
          >
            <CardHeader
              avatar={<Avatar src={post.avatar}>{post.author[0]}</Avatar>}
              title={post.author}
              subheader={new Date(post.timestamp).toLocaleDateString()}
              action={
                isAdmin && (
                  <IconButton onClick={() => deletePost(post.id)}>
                    <Delete />
                  </IconButton>
                )
              }
            />
            <CardContent>
              <Typography variant="h6" gutterBottom>
                {post.title}
              </Typography>
              <Typography
                variant="body1"
                dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(post.content) }}
              />
              <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>
                <Button
                  startIcon={<ThumbUp color={post.isLiked ? 'primary' : 'inherit'} />}
                  onClick={() =>
                    dispatch({ type: 'TOGGLE_LIKE', postId: post.id, isLiked: post.isLiked })
                  }
                >
                  {post.likes}
                </Button>
                <Button startIcon={<Comment />}>{post.commentCount}</Button>
              </Box>
            </CardContent>

            {/* 评论列表 */}
            <Divider />
            <CardContent>
              <CommentSection
                postId={post.id}
                comments={comments[post.id] || []}
                onSubmit={handleCommentSubmit}
              />
            </CardContent>
          </Card>
        ))}
        {loading && (
          <Box sx={{ display: 'flex', justifyContent: 'center', p: 2 }}>
            <CircularProgress />
          </Box>
        )}
      </List>

      {/* 全局通知 */}
      <Snackbar
        open={!!error}
        autoHideDuration={6000}
        onClose={() => dispatch({ type: 'SET_ERROR', payload: null })}
      >
        <Alert severity="error">{error}</Alert>
      </Snackbar>
    </Container>
  );
};

// =============================================================================
// 评论组件
// =============================================================================
const CommentSection = ({ postId, comments, onSubmit }) => {
  const [comment, setComment] = React.useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (comment.trim()) {
      onSubmit(postId, comment);
      setComment('');
    }
  };

  return (
    <Box sx={{ mt: 2 }}>
      <List>
        {comments.map((comment) => (
          <ListItem key={comment.id} alignItems="flex-start">
            <Box sx={{ width: '100%' }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                <Avatar sx={{ width: 24, height: 24, mr: 1 }}>
                  {comment.author[0]}
                </Avatar>
                <Typography variant="subtitle2">{comment.author}</Typography>
              </Box>
              <Typography variant="body2" sx={{ ml: 4 }}>
                {DOMPurify.sanitize(comment.content)}
              </Typography>
              <Typography variant="caption" sx={{ ml: 4, display: 'block' }}>
                {new Date(comment.timestamp).toLocaleTimeString()}
              </Typography>
            </Box>
          </ListItem>
        ))}
      </List>
      <form onSubmit={handleSubmit} style={{ marginTop: '16px' }}>
        <TextField
          fullWidth
          variant="outlined"
          placeholder="Write a comment..."
          value={comment}
          onChange={(e) => setComment(e.target.value)}
          InputProps={{
            endAdornment: (
              <Button type="submit" size="small" sx={{ ml: 1 }}>
                Post
              </Button>
            )
          }}
        />
      </form>
    </Box>
  );
};

// =============================================================================
// PropTypes验证
// =============================================================================
DiscussBoard.propTypes = {
  user: PropTypes.shape({
    username: PropTypes.string.isRequired,
    avatar: PropTypes.string
  }).isRequired,
  isAdmin: PropTypes.bool.isRequired,
  fetchPosts: PropTypes.func.isRequired,
  createPost: PropTypes.func.isRequired,
  deletePost: PropTypes.func.isRequired,
  createComment: PropTypes.func.isRequired
};

CommentSection.propTypes = {
  postId: PropTypes.string.isRequired,
  comments: PropTypes.arrayOf(
    PropTypes.shape({
      id: PropTypes.string.isRequired,
      content: PropTypes.string.isRequired,
      author: PropTypes.string.isRequired,
      timestamp: PropTypes.string.isRequired
    })
  ),
  onSubmit: PropTypes.func.isRequired
};

export default DiscussBoard;
