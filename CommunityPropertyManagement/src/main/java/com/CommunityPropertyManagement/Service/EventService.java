package com.CommunityPropertyManagement.Service;

import com.CommunityPropertyManagement.Model.Event;
import com.CommunityPropertyManagement.Repository.EventRepo;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class EventService {

    @Autowired
    private EventRepo eventRepository;

    // Create
    public Event createEvent(Event event) {
        // Ensure the event date is in the future
        if (event.getDatetime().isBefore(LocalDateTime.now())) {
            throw new IllegalArgumentException("Event date must be in the future");
        }
        return eventRepository.save(event); // ObjectId is auto-generated by MongoDB
    }

    // Read (Get All Future Events) sorted by date (nearest events first)
    public List<Event> getAllFutureEventsSortedByDate() {
        LocalDateTime now = LocalDateTime.now();
        return eventRepository.findAll().stream()
                .filter(event -> event.getDatetime().isAfter(now)) // Filter future events
                .sorted(Comparator.comparing(Event::getDatetime)) // Sort by datetime in ascending order
                .collect(Collectors.toList());
    }

    // Read (Get by ID)
    public Optional<Event> getEventById(ObjectId id) {
        return eventRepository.findById(id);
    }

    // Update
    public Event updateEvent(ObjectId id, Event updatedEvent) {
        // Ensure the updated event date is in the future
        if (updatedEvent.getDatetime().isBefore(LocalDateTime.now())) {
            throw new IllegalArgumentException("Event date must be in the future");
        }
        Event event = eventRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Event not found"));
        event.setName(updatedEvent.getName());
        event.setDatetime(updatedEvent.getDatetime());
        event.setLocation(updatedEvent.getLocation());
        return eventRepository.save(event);
    }

    // Delete
    public void deleteEvent(ObjectId id) {
        eventRepository.deleteById(id);
    }
}